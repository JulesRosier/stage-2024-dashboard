package view

import (
	"Stage-2024-dashboard/pkg/database"
	"strconv"
	"fmt"
	"time"
)

type EventShow struct {
	Event    database.Event
	Json     string
	Column   int
	ShowDate bool
}

templ QueryHome(columns []string) {
	@base(true) {
		<script src="/static/js/json-viewer.js"></script>
		<script src="/static/js/queries.js"></script>
		<script src="http://SortableJS.github.io/Sortable/Sortable.js"></script>
		<div class="container">
			<h1>Query</h1>
			<div>
				<form
					id="main-form"
					hx-get="/query/search"
					hx-target="#results"
					hx-disabled-elt="[type='submit'], [class='ext-form']"
					hx-trigger="onLoadC, submit"
					hx-include="[name='nerd_mode']"
				>
					// hx-ext="push-url-w-params"
					// data-push-url="/query"
					<ul id="queries">
						<li>
							<fieldset role="group">
								<select name="column" required>
									<option selected disabled value="">
										Select a index column
									</option>
									for _, column := range(columns) {
										<option>{ column }</option>
									}
								</select>
								<input name="search" placeholder="Search Key" required/>
								<button class="rm-form pico-background-red-500">-</button>
							</fieldset>
						</li>
					</ul>
					<div>
						<fieldset role="group">
							<input
								type="datetime-local"
								name="start"
								aria-label="Datetime local"
								value={ time.Now().Add(-7 * 24 * time.Hour).Format("2006-01-02T15:04") }
								required
							/>
							<input
								type="datetime-local"
								name="end"
								aria-label="Datetime local"
								value={ time.Now().Format("2006-01-02T15:04") }
								required
							/>
						</fieldset>
						<input type="submit" value="Search"/>
					</div>
				</form>
			</div>
			<div class="controls">
				<button id="add-form">Add query</button>
				<label>
					<input name="nerd_mode" type="checkbox" role="switch"/>
					<script>
					me('prev').on('change', event => {
						let e = me(event)
						localStorage.setItem("nerd_mode", e.checked)
					})
					me('prev').run(event => {
						me(event).checked = (localStorage.getItem("nerd_mode") == "true")
					})
				</script>
					Advanced
				</label>
			</div>
		</div>
		<div id="results" class="eventlist"></div>
		<template id="form-template">
			<li>
				<fieldset role="group">
					<select name="column" required>
						<option selected disabled value="">
							Select a index column
						</option>
						for _, column := range(columns) {
							<option>{ column }</option>
						}
					</select>
					<input name="search" placeholder="Search Key" required/>
					<button class="rm-form pico-background-red-500">-</button>
				</fieldset>
			</li>
		</template>
	}
}

templ ListEvents(events []EventShow, qps []database.QueryParams, nerd bool, query string, showHeaders bool) {
	if showHeaders {
		<h1 class="grid-header">Time</h1>
		for i, qp := range(qps) {
			@templ.Raw(fmt.Sprintf("<hgroup class='grid-header' style='grid-column: %d'>", i+2))
			<h1>{ qp.Column }</h1>
			<h2>{ qp.Search }</h2>
			@templ.Raw("</hgroup>")
		}
	}
	for _, event := range(events) {
		<div class="event-timestamp">
			if event.ShowDate {
				<h3>{ event.Event.EventTimestamp.Time.Format("2 Jan 2006") }</h3>
			}
			<p>
				{ event.Event.EventTimestamp.Time.Format("15:04:05.000") }
			</p>
		</div>
		@templ.Raw(fmt.Sprintf("<div style='grid-column: %d'>", event.Column))
		@Event(event.Event, event.Json, nerd)
		@templ.Raw("</div>")
	}
	<div
		hx-get={ "/query/search?" + query }
		hx-trigger="revealed"
		hx-swap="afterend"
	></div>
}

templ Event(event database.Event, json string, nerd bool) {
	<article>
		<details>
			<summary>
				{ prittyName(event.TopicName) }
				if nerd {
					- { strconv.FormatInt(int64(event.ID), 10) }
				}
			</summary>
			<div>
				<div class="tab">
					if nerd {
						<div>Database timestamp </div>
						<div>{ event.InsertedAt.Time.Format("2006-01-02 15:04:05.00") }</div>
						<div>Eventhub timestamp</div>
						<div>{ event.EventhubTimestamp.Time.Format("2006-01-02 15:04:05.00") }</div>
						<div>Offset</div>
						<div>{ strconv.FormatInt(event.TopicOffset, 10) }</div>
						<div>Partition</div>
						<div>{ strconv.FormatInt(int64(event.TopicPartition), 10) }</div>
					}
					<div>headers</div>
					<div>{ string(event.EventHeaders) }</div>
					<div>key</div>
					<div>{ string(event.EventKey) }</div>
				</div>
				// <json-viewer>
				// 	{  base64.StdEncoding.EncodeToString(event.EventValue) }
				// </json-viewer>
				<div class="json">
					@templ.Raw(json)
				</div>
			</div>
		</details>
	</article>
}
