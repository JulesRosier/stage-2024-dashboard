package view

import (
	"Stage-2024-dashboard/pkg/database"
	"encoding/base64"
	"strings"
)

type EventWithDate struct {
	Event    database.Event
	ShowDate bool
}

templ QueryHome(columns []string) {
	@base(false) {
		<script src="/static/js/json-viewer.js"></script>
		<div class="container">
			<h1>Query</h1>
			<form
				role="search"
				hx-get="/query/search"
				hx-target="#results"
			>
				<select name="column" required>
					<option selected disabled value="">
						Select a index column
					</option>
					for _, column := range(columns) {
						<option>{ column }</option>
					}
				</select>
				<input name="search" type="search" placeholder="Search Key" required/>
				<input type="submit" value="Search" hx-disabled-elt="this"/>
			</form>
		</div>
		<div id="results"></div>
	}
}

templ ListEvents(events []EventWithDate) {
	<style>
			me {
				display: flex;
				flex-direction: column;
			}
			me article {
				width: 650px;
				align-self: center;
			}
			me article details {
				margin: 1em;
			}
			me article details summary {
				font-size: 1.3rem;
			}
			me .event {
				display: flex;
				justify-content: center;
			}
			me .event p {
				padding: 1em;
			}
	</style>
	for _, event := range(events) {
		if event.ShowDate {
			<h2>{ event.Event.EventTimestamp.Time.Format("2 Jan 2006") }</h2>
		}
		@Event(event.Event)
	}
}

templ Event(event database.Event) {
	<div class="event">
		<p>
			{ event.EventTimestamp.Time.Format("15:04:05.000") }
		</p>
		<article>
			<details>
				<summary>
					{ prittyName(event.TopicName) }
				</summary>
				<div>
					<json-viewer>
						{  base64.StdEncoding.EncodeToString(event.EventValue) }
					</json-viewer>
				</div>
			</details>
		</article>
	</div>
}

func prittyName(s string) string {
	return strings.Title(strings.ReplaceAll(s, "_", " "))
}
