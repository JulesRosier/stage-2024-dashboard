// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    event_timestamp, topic_name, topic_offset,
    topic_partition, event_headers, event_key, event_value
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, inserted_at, event_timestamp, topic_name, topic_offset, topic_partition, event_headers, event_key, event_value
`

type CreateEventParams struct {
	EventTimestamp pgtype.Timestamp
	TopicName      string
	TopicOffset    int64
	TopicPartition int32
	EventHeaders   []byte
	EventKey       []byte
	EventValue     []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.EventTimestamp,
		arg.TopicName,
		arg.TopicOffset,
		arg.TopicPartition,
		arg.EventHeaders,
		arg.EventKey,
		arg.EventValue,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.EventTimestamp,
		&i.TopicName,
		&i.TopicOffset,
		&i.TopicPartition,
		&i.EventHeaders,
		&i.EventKey,
		&i.EventValue,
	)
	return i, err
}

const createEventKeyConfig = `-- name: CreateEventKeyConfig :one
INSERT INTO event_key_configs (
    topic_name, key_selector, index_column
) VALUES (
 $1, $2, $3
)
RETURNING id, inserted_at, topic_name, key_selector, index_column
`

type CreateEventKeyConfigParams struct {
	TopicName   string
	KeySelector []string
	IndexColumn string
}

func (q *Queries) CreateEventKeyConfig(ctx context.Context, arg CreateEventKeyConfigParams) (EventKeyConfig, error) {
	row := q.db.QueryRow(ctx, createEventKeyConfig, arg.TopicName, arg.KeySelector, arg.IndexColumn)
	var i EventKeyConfig
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.TopicName,
		&i.KeySelector,
		&i.IndexColumn,
	)
	return i, err
}

const listEventKeyConfigs = `-- name: ListEventKeyConfigs :many
SELECT id, inserted_at, topic_name, key_selector, index_column
FROM event_key_configs
`

func (q *Queries) ListEventKeyConfigs(ctx context.Context) ([]EventKeyConfig, error) {
	rows, err := q.db.Query(ctx, listEventKeyConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventKeyConfig
	for rows.Next() {
		var i EventKeyConfig
		if err := rows.Scan(
			&i.ID,
			&i.InsertedAt,
			&i.TopicName,
			&i.KeySelector,
			&i.IndexColumn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
