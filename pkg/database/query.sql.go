// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    event_timestamp, topic_name, topic_offset,
    topic_partition, event_headers, event_key, event_value
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, inserted_at, event_timestamp, topic_name, topic_offset, topic_partition, event_headers, event_key, event_value
`

type CreateEventParams struct {
	EventTimestamp pgtype.Timestamp
	TopicName      string
	TopicOffset    int64
	TopicPartition int32
	EventHeaders   []byte
	EventKey       []byte
	EventValue     []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.EventTimestamp,
		arg.TopicName,
		arg.TopicOffset,
		arg.TopicPartition,
		arg.EventHeaders,
		arg.EventKey,
		arg.EventValue,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.EventTimestamp,
		&i.TopicName,
		&i.TopicOffset,
		&i.TopicPartition,
		&i.EventHeaders,
		&i.EventKey,
		&i.EventValue,
	)
	return i, err
}

const createEventIndexConfig = `-- name: CreateEventIndexConfig :one
INSERT INTO event_index_configs (
    topic_name, key_selector, index_column
) VALUES (
 $1, $2, $3
)
RETURNING id, inserted_at, topic_name, key_selector, index_column
`

type CreateEventIndexConfigParams struct {
	TopicName   string
	KeySelector []string
	IndexColumn string
}

func (q *Queries) CreateEventIndexConfig(ctx context.Context, arg CreateEventIndexConfigParams) (EventIndexConfig, error) {
	row := q.db.QueryRow(ctx, createEventIndexConfig, arg.TopicName, arg.KeySelector, arg.IndexColumn)
	var i EventIndexConfig
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.TopicName,
		&i.KeySelector,
		&i.IndexColumn,
	)
	return i, err
}

const deleteEventIndexConfigs = `-- name: DeleteEventIndexConfigs :exec
DELETE FROM event_index_configs
WHERE id = $1
`

func (q *Queries) DeleteEventIndexConfigs(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEventIndexConfigs, id)
	return err
}

const getEventIndexConfig = `-- name: GetEventIndexConfig :one
SELECT id, inserted_at, topic_name, key_selector, index_column
FROM event_index_configs
WHERE id = $1
`

func (q *Queries) GetEventIndexConfig(ctx context.Context, id int32) (EventIndexConfig, error) {
	row := q.db.QueryRow(ctx, getEventIndexConfig, id)
	var i EventIndexConfig
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.TopicName,
		&i.KeySelector,
		&i.IndexColumn,
	)
	return i, err
}

const listEventIndexConfigs = `-- name: ListEventIndexConfigs :many
SELECT id, inserted_at, topic_name, key_selector, index_column
FROM event_index_configs
ORDER BY inserted_at desc
`

func (q *Queries) ListEventIndexConfigs(ctx context.Context) ([]EventIndexConfig, error) {
	rows, err := q.db.Query(ctx, listEventIndexConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventIndexConfig
	for rows.Next() {
		var i EventIndexConfig
		if err := rows.Scan(
			&i.ID,
			&i.InsertedAt,
			&i.TopicName,
			&i.KeySelector,
			&i.IndexColumn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventIndexConfig = `-- name: UpdateEventIndexConfig :one
UPDATE event_index_configs
SET topic_name = $2,
  index_column = $3,
  key_selector = $4
WHERE id = $1
RETURNING id, inserted_at, topic_name, key_selector, index_column
`

type UpdateEventIndexConfigParams struct {
	ID          int32
	TopicName   string
	IndexColumn string
	KeySelector []string
}

func (q *Queries) UpdateEventIndexConfig(ctx context.Context, arg UpdateEventIndexConfigParams) (EventIndexConfig, error) {
	row := q.db.QueryRow(ctx, updateEventIndexConfig,
		arg.ID,
		arg.TopicName,
		arg.IndexColumn,
		arg.KeySelector,
	)
	var i EventIndexConfig
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.TopicName,
		&i.KeySelector,
		&i.IndexColumn,
	)
	return i, err
}
